{"version":3,"names":["DrawerView","React","PureComponent","loaded","props","navigation","state","index","drawerWidth","navigationConfig","createRef","descriptors","activeKey","routes","key","drawerLockMode","options","dispatch","DrawerActions","openDrawer","closeDrawer","setState","progress","screenProps","lazy","detachInactiveScreens","unmountInactiveRoutes","descriptor","getComponent","enabled","screensEnabled","styles","content","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","ref","drawerGestureRef","current","getDerivedStateFromProps","nextProps","prevState","componentDidMount","getLockMode","handleDrawerOpen","Dimensions","addEventListener","updateWidth","componentDidUpdate","prevProps","prevLockMode","nextLockMode","handleDrawerClose","componentWillUnmount","removeEventListener","getDrawerBackgroundColor","drawerBackgroundColor","context","ThemeColors","bodyContent","getOverlayColor","overlayColor","render","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","isDrawerOpen","setDrawerGestureRef","drawerPosition","backgroundColor","width","renderNavigationView","renderContent","ThemeContext","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n  detachInactiveScreens: boolean;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation, detachInactiveScreens = true } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      const enabled = screensEnabled?.() && detachInactiveScreens;\n\n      return (\n        // @ts-ignore\n        <ScreenContainer enabled={enabled} style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":";;;;;;AAAA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6C9B;AACA;AACA;AACe,MAAMA,UAAU,SAASC,KAAK,CAACC,aAAa,CAAe;EAAA;IAAA;IAAA,+BAkBzD;MACbC,MAAM,EAAE,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,KAAK,CAACC,KAAK,CAAC;MAC3CC,WAAW,EACT,OAAO,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD,WAAW,KAAK,UAAU,GACzD,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD,WAAW,EAAE,GACzC,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD;IACpC,CAAC;IAAA;IAAA,uDA8B0BP,KAAK,CAACS,SAAS,EAAqB;IAAA,qCAEzC,QAAwC;MAAA,IAAvC;QAAEL,UAAU;QAAEM;MAAmB,CAAC;MACvD,MAAMC,SAAS,GAAGP,UAAU,CAACC,KAAK,CAACO,MAAM,CAACR,UAAU,CAACC,KAAK,CAACC,KAAK,CAAC,CAACO,GAAG;MACrE,MAAM;QAAEC;MAAe,CAAC,GAAGJ,WAAW,CAACC,SAAS,CAAC,CAACI,OAAO;MAEzD,OAAOD,cAAc;IACvB,CAAC;IAAA,0CAE0B,MAAM;MAC/B,MAAM;QAAEV;MAAW,CAAC,GAAG,IAAI,CAACD,KAAK;MAEjCC,UAAU,CAACY,QAAQ,CACjBC,aAAa,CAACC,UAAU,CAAC;QACvBL,GAAG,EAAET,UAAU,CAACC,KAAK,CAACQ;MACxB,CAAC,CAAC,CACH;IACH,CAAC;IAAA,2CAE2B,MAAM;MAChC,MAAM;QAAET;MAAW,CAAC,GAAG,IAAI,CAACD,KAAK;MAEjCC,UAAU,CAACY,QAAQ,CACjBC,aAAa,CAACE,WAAW,CAAC;QACxBN,GAAG,EAAET,UAAU,CAACC,KAAK,CAACQ;MACxB,CAAC,CAAC,CACH;IACH,CAAC;IAAA,qCAEqB,MAAM;MAC1B,MAAMN,WAAW,GACf,OAAO,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD,WAAW,KAAK,UAAU,GACzD,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD,WAAW,EAAE,GACzC,IAAI,CAACJ,KAAK,CAACK,gBAAgB,CAACD,WAAW;MAE7C,IAAI,IAAI,CAACF,KAAK,CAACE,WAAW,KAAKA,WAAW,EAAE;QAC1C,IAAI,CAACa,QAAQ,CAAC;UAAEb;QAAY,CAAC,CAAC;MAChC;IACF,CAAC;IAAA,8CAE8B,SAAuB;MAAA,IAAtB;QAAEc;MAAc,CAAC;MAC/C,oBACE,oBAAC,sBAAa;QACZ,WAAW,EAAE,IAAI,CAAClB,KAAK,CAACmB,WAAY;QACpC,kBAAkB,EAAED,QAAS;QAC7B,UAAU,EAAE,IAAI,CAAClB,KAAK,CAACC,UAAW;QAClC,WAAW,EAAE,IAAI,CAACD,KAAK,CAACO;MAAY,GAChC,IAAI,CAACP,KAAK,CAACK,gBAAgB,EAC/B;IAEN,CAAC;IAAA,uCAEuB,MAAM;MAC5B,IAAI;QAAEe,IAAI;QAAEnB,UAAU;QAAEoB,qBAAqB,GAAG;MAAK,CAAC,GAAG,IAAI,CAACrB,KAAK;MACnE,IAAI;QAAED;MAAO,CAAC,GAAG,IAAI,CAACG,KAAK;MAC3B,IAAI;QAAEO;MAAO,CAAC,GAAGR,UAAU,CAACC,KAAK;MAEjC,IAAI,IAAI,CAACF,KAAK,CAACK,gBAAgB,CAACiB,qBAAqB,EAAE;QACrD,IAAId,SAAS,GAAGP,UAAU,CAACC,KAAK,CAACO,MAAM,CAACR,UAAU,CAACC,KAAK,CAACC,KAAK,CAAC,CAACO,GAAG;QACnE,IAAIa,UAAU,GAAG,IAAI,CAACvB,KAAK,CAACO,WAAW,CAACC,SAAS,CAAC;QAElD,oBACE,oBAAC,0BAAS;UACR,UAAU,EAAEe,UAAU,CAACtB,UAAW;UAClC,WAAW,EAAE,IAAI,CAACD,KAAK,CAACmB,WAAY;UACpC,SAAS,EAAEI,UAAU,CAACC,YAAY;QAAG,EACrC;MAEN,CAAC,MAAM;QACL,MAAMC,OAAO,GAAG,CAAAC,kCAAc,aAAdA,kCAAc,uBAAd,IAAAA,kCAAc,GAAI,KAAIL,qBAAqB;QAE3D;UAAA;UACE;UACA,oBAAC,mCAAe;YAAC,OAAO,EAAEI,OAAQ;YAAC,KAAK,EAAEE,MAAM,CAACC;UAAQ,GACtDnB,MAAM,CAACoB,GAAG,CAAC,CAACC,KAAK,EAAE3B,KAAK,KAAK;YAC5B,IAAIiB,IAAI,IAAI,CAACrB,MAAM,CAACgC,QAAQ,CAAC5B,KAAK,CAAC,EAAE;cACnC;cACA,OAAO,IAAI;YACb;YAEA,IAAI6B,SAAS,GAAG/B,UAAU,CAACC,KAAK,CAACC,KAAK,KAAKA,KAAK;YAChD,IAAIoB,UAAU,GAAG,IAAI,CAACvB,KAAK,CAACO,WAAW,CAACuB,KAAK,CAACpB,GAAG,CAAC;YAElD,oBACE,oBAAC,4BAAmB;cAClB,GAAG,EAAEoB,KAAK,CAACpB,GAAI;cACf,KAAK,EAAE,CACLuB,uBAAU,CAACC,YAAY,EACvB;gBAAEC,OAAO,EAAEH,SAAS,GAAG,CAAC,GAAG;cAAE,CAAC,CAC9B;cACF,SAAS,EAAEA,SAAU;cACrB,OAAO,EAAEX;YAAsB,gBAE/B,oBAAC,0BAAS;cACR,UAAU,EAAEE,UAAU,CAACtB,UAAW;cAClC,WAAW,EAAE,IAAI,CAACD,KAAK,CAACmB,WAAY;cACpC,SAAS,EAAEI,UAAU,CAACC,YAAY;YAAG,EACrC,CACkB;UAE1B,CAAC,CAAC;QACc;MAEtB;IACF,CAAC;IAAA,6CAE8BY,GAA6B,IAAK;MAC/D;MACA,IAAI,CAACC,gBAAgB,CAACC,OAAO,GAAGF,GAAG;IACrC,CAAC;EAAA;EA5JD,OAAOG,wBAAwB,CAACC,SAAgB,EAAEC,SAAgB,EAAE;IAClE,MAAM;MAAEtC;IAAM,CAAC,GAAGqC,SAAS,CAACvC,UAAU,CAACC,KAAK;IAE5C,OAAO;MACL;MACAH,MAAM,EAAE0C,SAAS,CAAC1C,MAAM,CAACgC,QAAQ,CAAC5B,KAAK,CAAC,GACpCsC,SAAS,CAAC1C,MAAM,GAChB,CAAC,GAAG0C,SAAS,CAAC1C,MAAM,EAAEI,KAAK;IACjC,CAAC;EACH;EAUAuC,iBAAiB,GAAG;IAClB;IACA,IAAI,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC3C,KAAK,CAAC,KAAK,aAAa,EAAE;MAClD,IAAI,CAAC4C,gBAAgB,EAAE;IACzB;IAEAC,uBAAU,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,WAAW,CAAC;EACzD;EAEAC,kBAAkB,CAACC,SAAgB,EAAE;IACnC,MAAMC,YAAY,GAAG,IAAI,CAACP,WAAW,CAACM,SAAS,CAAC;IAChD,MAAME,YAAY,GAAG,IAAI,CAACR,WAAW,CAAC,IAAI,CAAC3C,KAAK,CAAC;IAEjD,IAAIkD,YAAY,KAAKC,YAAY,EAAE;MACjC,IAAIA,YAAY,KAAK,aAAa,EAAE;QAClC,IAAI,CAACP,gBAAgB,EAAE;MACzB,CAAC,MAAM;QACL,IAAI,CAACQ,iBAAiB,EAAE;MAC1B;IACF;EACF;EAEAC,oBAAoB,GAAG;IACrBR,uBAAU,CAACS,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACP,WAAW,CAAC;EAC5D;EAmHQQ,wBAAwB,GAAG;IACjC,MAAM;MAAEC;IAAsB,CAAC,GAAG,IAAI,CAACxD,KAAK,CAACK,gBAAgB;IAE7D,IAAImD,qBAAqB,EAAE;MACzB,OAAO,OAAOA,qBAAqB,KAAK,QAAQ,GAC5CA,qBAAqB,GACrBA,qBAAqB,CAAC,IAAI,CAACC,OAAO,CAAC;IACzC,CAAC,MAAM;MACL,OAAOC,4BAAW,CAAC,IAAI,CAACD,OAAO,CAAC,CAACE,WAAW;IAC9C;EACF;EAEQC,eAAe,GAAG;IACxB,MAAM;MAAEC;IAAa,CAAC,GAAG,IAAI,CAAC7D,KAAK,CAACK,gBAAgB;IAEpD,IAAIwD,YAAY,EAAE;MAChB,OAAO,OAAOA,YAAY,KAAK,QAAQ,GACnCA,YAAY,GACZA,YAAY,CAAC,IAAI,CAACJ,OAAO,CAAC;IAChC,CAAC,MAAM;MACL,OAAO,iBAAiB;IAC1B;EACF;EAEAK,MAAM,GAAG;IACP,MAAM;MAAE7D,UAAU;MAAEI;IAAiB,CAAC,GAAG,IAAI,CAACL,KAAK;IACnD,MAAM;MACJ+D,UAAU;MACVC,mBAAmB;MACnBC,SAAS;MACTC,gBAAgB;MAChBC,aAAa;MACbC,kBAAkB;MAClBC;IACF,CAAC,GAAGhE,gBAAgB;IAEpB,MAAMM,cAAc,GAAG,IAAI,CAACgC,WAAW,CAAC,IAAI,CAAC3C,KAAK,CAAC;IACnD,MAAMwD,qBAAqB,GAAG,IAAI,CAACD,wBAAwB,EAAE;IAC7D,MAAMM,YAAY,GAAG,IAAI,CAACD,eAAe,EAAE;IAE3C,oBACE,oBAAC,6BAAoB,CAAC,QAAQ;MAAC,KAAK,EAAE,IAAI,CAACvB;IAAiB,gBAC1D,oBAAC,eAAM;MACL,IAAI,EAAEpC,UAAU,CAACC,KAAK,CAACoE,YAAa;MACpC,cAAc,EACZ3D,cAAc,KAAK,aAAa,IAChCA,cAAc,KAAK,eACpB;MACD,MAAM,EAAE,IAAI,CAACiC,gBAAiB;MAC9B,OAAO,EAAE,IAAI,CAACQ,iBAAkB;MAChC,YAAY,EAAE,IAAI,CAACmB,mBAAoB;MACvC,mBAAmB,EAAEF,mBAAoB;MACzC,UAAU,EAAEN,UAAW;MACvB,cAAc,EAAE,IAAI,CAAC/D,KAAK,CAACK,gBAAgB,CAACmE,cAAe;MAC3D,mBAAmB,EAAER,mBAAoB;MACzC,WAAW,EAAE;QACXS,eAAe,EAAEjB,qBAAqB;QACtCkB,KAAK,EAAE,IAAI,CAACxE,KAAK,CAACE;MACpB,CAAE;MACF,YAAY,EAAE;QAAEqE,eAAe,EAAEZ;MAAa,CAAE;MAChD,cAAc,EAAEI,SAAU;MAC1B,sBAAsB,EAAEC,gBAAiB;MACzC,aAAa,EAAEC,aAAc;MAC7B,kBAAkB,EAAEC,kBAAmB;MACvC,mBAAmB,EAAE,IAAI,CAACO,oBAAqB;MAC/C,kBAAkB,EAAE,IAAI,CAACC;IAAc,EACvC,CAC4B;EAEpC;AACF;AAAC;AAAA,gBA3OoBhF,UAAU,iBAERiF,6BAAY;AAAA,gBAFdjF,UAAU,kBAGP;EACpBwB,IAAI,EAAE;AACR,CAAC;AAwOH,MAAMO,MAAM,GAAGM,uBAAU,CAAC6C,MAAM,CAAC;EAC/BlD,OAAO,EAAE;IACPmD,IAAI,EAAE;EACR;AACF,CAAC,CAAC"}