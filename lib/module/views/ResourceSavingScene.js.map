{"version":3,"names":["React","Platform","StyleSheet","View","Screen","screensEnabled","shouldUseActivityState","FAR_FAR_AWAY","ResourceSavingScene","Component","render","props","enabled","OS","isVisible","rest","children","style","styles","container","display","attached","detached","create","flex","overflow","top"],"sources":["ResourceSavingScene.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n  enabled: boolean;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && this.props.enabled && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,UAAU,EAAEC,IAAI,QAAQ,cAAc;AACzD,SACEC,MAAM,EACNC,cAAc;AACd;AACAC,sBAAsB,QACjB,sBAAsB;AAS7B,MAAMC,YAAY,GAAG,KAAK,CAAC,CAAC;;AAE5B,eAAe,MAAMC,mBAAmB,SAASR,KAAK,CAACS,SAAS,CAAQ;EACtEC,MAAM,GAAG;IACP;IACA,IAAIL,cAAc,aAAdA,cAAc,eAAdA,cAAc,EAAI,IAAI,IAAI,CAACM,KAAK,CAACC,OAAO,IAAIX,QAAQ,CAACY,EAAE,KAAK,KAAK,EAAE;MACrE,MAAM;QAAEC,SAAS;QAAE,GAAGC;MAAK,CAAC,GAAG,IAAI,CAACJ,KAAK;MAEzC,IAAIL,sBAAsB,EAAE;QAC1B;UAAA;UACE;UACA,oBAAC,MAAM;YAAC,aAAa,EAAEQ,SAAS,GAAG,CAAC,GAAG;UAAE,GAAKC,IAAI;QAAI;MAE1D,CAAC,MAAM;QACL;UAAA;UACE;UACA,oBAAC,MAAM;YAAC,MAAM,EAAED,SAAS,GAAG,CAAC,GAAG;UAAE,GAAKC,IAAI;QAAI;MAEnD;IACF;IAEA,MAAM;MAAED,SAAS;MAAEE,QAAQ;MAAEC,KAAK;MAAE,GAAGF;IAAK,CAAC,GAAG,IAAI,CAACJ,KAAK;IAE1D,oBACE,oBAAC,IAAI;MACH,KAAK,EAAE,CACLO,MAAM,CAACC,SAAS,EAChBlB,QAAQ,CAACY,EAAE,KAAK,KAAK,GACjB;QAAEO,OAAO,EAAEN,SAAS,GAAG,MAAM,GAAG;MAAO,CAAC,GACxC,IAAI,EACRG,KAAK,CACL;MACF,WAAW,EAAE,KAAM;MACnB,qBAAqB;MACnB;MACA;MACAhB,QAAQ,CAACY,EAAE,KAAK,KAAK,GAAG,CAACC,SAAS,GAAG,IACtC;MACD,aAAa,EAAEA,SAAS,GAAG,MAAM,GAAG;IAAO,GACvCC,IAAI,gBAER,oBAAC,IAAI;MAAC,KAAK,EAAED,SAAS,GAAGI,MAAM,CAACG,QAAQ,GAAGH,MAAM,CAACI;IAAS,GACxDN,QAAQ,CACJ,CACF;EAEX;AACF;AAEA,MAAME,MAAM,GAAGhB,UAAU,CAACqB,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ,CAAC;EACDJ,QAAQ,EAAE;IACRG,IAAI,EAAE;EACR,CAAC;EACDF,QAAQ,EAAE;IACRE,IAAI,EAAE,CAAC;IACPE,GAAG,EAAEnB;EACP;AACF,CAAC,CAAC"}