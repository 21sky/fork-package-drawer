{"version":3,"names":["React","StyleSheet","I18nManager","Platform","Keyboard","StatusBar","PanGestureHandler","TapGestureHandler","State","Animated","DrawerProgressContext","Clock","Value","onChange","clockRunning","startClock","stopClock","interpolateNode","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","PureComponent","props","drawerType","open","UNDETERMINED","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","undefined","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","manuallyTriggerSpring","offsetX","value","Boolean","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","e","setValue","layout","width","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","isRTL","offset","hitSlop","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","content","transform","handleTapStateChange","overlay","opacity","inputRange","outputRange","zIndex","OS","handleDrawerLayout","container","drawerPostion","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolateNode,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolateNode(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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"}